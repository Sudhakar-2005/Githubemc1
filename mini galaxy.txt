<!-- Created by Sudhakar -->

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Galaxy Universe</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            background: #000;
        }
        canvas {
            display: block;
        }
    </style>
</head>
<body>
<canvas id="universe"></canvas>

<script>
    const canvas = document.getElementById('universe');
    const context = canvas.getContext('2d');

    let stars = [], // Array that will hold all the stars
        FPS = 60, // Frames per second
        x = 100, // Number of stars
        mouse = {
            x: 0,
            y: 0
        };

    // Push stars to the array
    for (let i = 0; i < x; i++) {
        stars.push({
            x: Math.random() * canvas.width,
            y: Math.random() * canvas.height,
            radius: Math.random() * 1 + 1,
            vx: Math.floor(Math.random() * 50) - 25,
            vy: Math.floor(Math.random() * 50) - 25
        });
    }

    // Draw the scene
    function draw() {
        context.clearRect(0, 0, canvas.width, canvas.height);

        context.globalCompositeOperation = "lighter";

        for (let i = 0, x = stars.length; i < x; i++) {
            let s = stars[i];

            context.fillStyle = "#fff";
            context.beginPath();
            context.arc(s.x, s.y, s.radius, 0, 2 * Math.PI);
            context.fill();
            context.fillStyle = 'black';
            context.stroke();
        }

        context.beginPath();
        for (let i = 0, x = stars.length; i < x; i++) {
            let starI = stars[i];
            context.moveTo(starI.x, starI.y);
            if (distance(mouse, starI) < 150) context.lineTo(mouse.x, mouse.y);
            for (let j = 0, x = stars.length; j < x; j++) {
                let starII = stars[j];
                if (distance(starI, starII) < 150) {
                    //context.globalAlpha = (1 / 150 * distance(starI, starII).toFixed(1));
                    context.lineTo(starII.x, starII.y);
                }
            }
        }
        context.lineWidth = 0.05;
        context.strokeStyle = 'white';
        context.stroke();
    }

    function distance(point1, point2) {
        let xs = 0;
        let ys = 0;

        xs = point2.x - point1.x;
        xs = xs * xs;

        ys = point2.y - point1.y;
        ys = ys * ys;

        return Math.sqrt(xs + ys);
    }

    // Update star locations
    function update() {
        for (let i = 0, x = stars.length; i < x; i++) {
            let s = stars[i];

            s.x += s.vx / FPS;
            s.y += s.vy / FPS;

            if (s.x < 0 || s.x > canvas.width) s.vx = -s.vx;
            if (s.y < 0 || s.y > canvas.height) s.vy = -s.vy;
        }
    }

    canvas.addEventListener('mousemove', function(e) {
        mouse.x = e.clientX;
        mouse.y = e.clientY;
    });

    // Update and draw the scene every frame
    function tick() {
        draw();
        update();
        requestAnimationFrame(tick);
    }

    // Set canvas to full screen
    function resizeCanvas() {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
    }
    window.addEventListener('resize', resizeCanvas, false);
    resizeCanvas();

    tick();
</script>
</body>
</html>
